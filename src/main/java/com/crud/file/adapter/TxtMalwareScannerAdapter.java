package com.crud.file.adapter;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import xyz.capybara.clamav.ClamavClient;
import xyz.capybara.clamav.commands.scan.result.ScanResult;

import java.io.InputStream;
import java.util.Collection;
import java.util.Map;

@Component
@Slf4j
public class TxtMalwareScannerAdapter implements MalwareScannerAdapter {

    @Value("${clamav.host}")
    private String CLAMAV_HOST;

    @Value("${clamav.port}")
    private int CLAMAV_PORT;

    @Override
    public boolean supports(String contentType) {
        return "text/plain".equalsIgnoreCase(contentType);
    }

    @Override
    public boolean scanFile(MultipartFile file) {
        try (InputStream inputStream = file.getInputStream()) {
            ClamavClient clamAV = new ClamavClient(CLAMAV_HOST, CLAMAV_PORT);
            ScanResult scan = clamAV.scan(inputStream);

            if (scan instanceof ScanResult.OK) {
                log.info("ClamAV 스캔 결과 ({}): {}", file.getOriginalFilename(), "OK");
                return true; // 안전
            } else if (scan instanceof ScanResult.VirusFound) {
                Map<String, Collection<String>> viruses = ((ScanResult.VirusFound) scan).getFoundViruses();
                log.error("ClamAV 바이러스 발견: {}", viruses);
                return false; // 감염
            } else {
                log.warn("ClamAV 스캔 결과 알 수 없음: {}", scan.getClass().getSimpleName());
                return false;
            }
        } catch (Exception e) {
            log.error("ClamAV 검사 중 예외 발생", e);
            throw new RuntimeException("파일 검사 실패", e);
        }
    }
}

name: API 변경 Discord Notification

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  notify-api-change:
    # 커밋 메시지/PR 제목이 [API변경] 으로 시작할 때만 실행
    if: ${{ (github.event_name == 'push' && startsWith(github.event.head_commit.message, '[API변경]')) || (github.event_name == 'pull_request' && startsWith(github.event.pull_request.title, '[API변경]')) }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # PR 기준 커밋 비교 등을 위해 전체 히스토리 사용
          fetch-depth: 0

      - name: Collect change summary
        id: changes
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_SHA="${{ github.sha }}"
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            COMMIT_AUTHOR="${{ github.event.head_commit.author.name || github.actor }}"
            COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
            BRANCH_NAME="${{ github.ref_name }}"
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || true)
          else
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
            COMMIT_MSG="${{ github.event.pull_request.title }}"
            COMMIT_AUTHOR="${{ github.event.pull_request.user.login }}"
            COMMIT_URL="${{ github.event.pull_request.html_url }}"
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
            CHANGED_FILES=$(git diff --name-only "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" || true)
          fi

          # 파일 목록 포맷팅(불릿 + 코드폰트)
          FORMATTED_FILES=""
          while IFS= read -r f; do
            [ -n "$f" ] && FORMATTED_FILES="${FORMATTED_FILES}• \`$f\`\n"
          done <<< "$CHANGED_FILES"

          FILE_COUNT=$(printf "%s\n" "$CHANGED_FILES" | sed '/^\s*$/d' | wc -l | tr -d ' ')

          {
            echo "commit_sha=$COMMIT_SHA"
            echo "commit_msg<<EOF"
            echo "$COMMIT_MSG"
            echo "EOF"
            echo "commit_author=$COMMIT_AUTHOR"
            echo "commit_url=$COMMIT_URL"
            echo "branch_name=$BRANCH_NAME"
            echo "file_count=$FILE_COUNT"
            echo "changed_files<<EOF"
            echo "$FORMATTED_FILES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        shell: bash
        run: |
          [ -z "$DISCORD_WEBHOOK_URL" ] && { echo "Missing DISCORD_WEBHOOK_URL secret"; exit 1; }

          if [ "${{ github.event_name }}" = "push" ]; then
            TITLE="🚀 [API변경] 감지 (Push)"
            COLOR=3066993
          else
            TITLE="📝 [API변경] 감지 (PR)"
            COLOR=15844367
          fi

          # JSON 페이로드 생성
          jq -n \
            --arg title "$TITLE" \
            --arg repo "${{ github.repository }}" \
            --arg repoUrl "${{ github.server_url }}/${{ github.repository }}" \
            --arg branch "\`${{ steps.changes.outputs.branch_name }}\`" \
            --arg author "${{ steps.changes.outputs.commit_author }}" \
            --arg msg "${{ steps.changes.outputs.commit_msg }}" \
            --arg files "${{ steps.changes.outputs.changed_files }}" \
            --arg url "${{ steps.changes.outputs.commit_url }}" \
            --argjson color $COLOR \
            --arg ts "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)" \
            '{
              embeds: [{
                title: $title,
                description: "커밋 메시지(또는 PR 제목)가 `[API변경]`으로 시작하여 알림을 전송합니다.",
                color: $color,
                fields: [
                  { name: "📁 Repository", value: "["+$repo+"]("+$repoUrl+")", inline: true },
                  { name: "🌿 Branch", value: $branch, inline: true },
                  { name: "👤 Author", value: $author, inline: true },
                  { name: "💬 Message / Title", value: $msg, inline: false },
                  { name: "📄 Changed Files ('+"${{ steps.changes.outputs.file_count }}"+")", value: ($files | if . == "" then "_(no files listed)_" else . end), inline: false },
                  { name: "🔗 View", value: "["+"Click to open"+"]("+$url+")", inline: false }
                ],
                footer: { text: "GitHub Actions • ${{ github.workflow }}", icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" },
                timestamp: $ts
              }]
            }' > discord_payload.json

          curl -sS -H "Content-Type: application/json" -d @discord_payload.json "$DISCORD_WEBHOOK_URL"

      - name: Summary
        run: |
          echo "## 🔔 [API변경] 알림 전송 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: ${{ steps.changes.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **작성자**: ${{ steps.changes.outputs.commit_author }}" >> $GITHUB_STEP_SUMMARY
          echo "- **파일 수**: ${{ steps.changes.outputs.file_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 메시지 / 제목" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.changes.outputs.commit_msg }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

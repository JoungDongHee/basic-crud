name: API Changes Discord Notification

# 워크플로우 실행 조건
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  notify-api-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 이전 커밋과 비교하기 위해 2개 커밋 가져오기

      - name: Check commit message for API changes
        id: check-commit
        run: |
          # 이벤트 타입에 따라 커밋 메시지 가져오기
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_MSG=$(git log -1 --pretty=format:'%s')
            COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
            COMMIT_EMAIL=$(git log -1 --pretty=format:'%ae')
            COMMIT_SHA="${{ github.sha }}"
            COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
            BRANCH_NAME="${{ github.ref_name }}"
          else
            COMMIT_MSG="${{ github.event.pull_request.title }}"
            COMMIT_AUTHOR="${{ github.event.pull_request.user.login }}"
            COMMIT_EMAIL=""
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
            COMMIT_URL="${{ github.event.pull_request.html_url }}"
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          fi
          
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "commit_email=$COMMIT_EMAIL" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit_url=$COMMIT_URL" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # '[API 변경]'으로 시작하는지 확인
          if [[ "$COMMIT_MSG" == \[API\ 변경\]* ]]; then
            echo "is_api_change=true" >> $GITHUB_OUTPUT
            echo "✅ API 변경 커밋 감지: $COMMIT_MSG"
          else
            echo "is_api_change=false" >> $GITHUB_OUTPUT
            echo "ℹ️  일반 커밋: $COMMIT_MSG"
          fi

      - name: Get changed files
        id: changed-files
        if: steps.check-commit.outputs.is_api_change == 'true'
        run: |
          # 변경된 파일들을 가져오기
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || true)
          else
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD || true)
          fi
          
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # 변경된 파일 수 계산
          if [ -n "$CHANGED_FILES" ]; then
            FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          else
            FILE_COUNT=0
          fi
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT

      - name: Get detailed commit info
        id: detailed-info
        if: steps.check-commit.outputs.is_api_change == 'true'
        run: |
          # 추가 커밋 정보 가져오기
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_DATE=$(git log -1 --pretty=format:'%ci')
            FULL_MESSAGE=$(git log -1 --pretty=format:'%B')
          else
            COMMIT_DATE="${{ github.event.pull_request.created_at }}"
            FULL_MESSAGE="${{ github.event.pull_request.body }}"
          fi
          
          echo "commit_date=$COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "full_message<<EOF" >> $GITHUB_OUTPUT
          echo "$FULL_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Discord notification
        if: steps.check-commit.outputs.is_api_change == 'true'
        run: |
          # Discord 웹훅 URL (GitHub Secrets에 저장된 값 사용)
          DISCORD_WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          
          # 변경된 파일 목록을 포맷팅 (최대 10개까지만 표시)
          CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
          FORMATTED_FILES=""
          FILE_COUNT=0
          while IFS= read -r file; do
            if [ -n "$file" ] && [ $FILE_COUNT -lt 10 ]; then
              FORMATTED_FILES="$FORMATTED_FILES• \`$file\`\n"
              FILE_COUNT=$((FILE_COUNT + 1))
            fi
          done <<< "$CHANGED_FILES"
          
          # 10개 이상인 경우 '...' 추가
          TOTAL_FILES=${{ steps.changed-files.outputs.file_count }}
          if [ $TOTAL_FILES -gt 10 ]; then
            FORMATTED_FILES="$FORMATTED_FILES• ... 그 외 $(($TOTAL_FILES - 10))개 파일\n"
          fi
          
          # 이벤트 타입에 따른 제목 설정
          if [ "${{ github.event_name }}" = "push" ]; then
            TITLE="🚀 API 변경 사항 알림 (Push)"
            COLOR=15158332  # 빨간색
          else
            TITLE="📝 API 변경 사항 알림 (PR)"
            COLOR=15844367  # 노란색
          fi
          
          # 커밋 메시지에서 '[API 변경]' 제거한 순수 메시지
          CLEAN_MESSAGE=$(echo "${{ steps.check-commit.outputs.commit_msg }}" | sed 's/^\[API 변경\] *//')
          
          # 전체 커밋 메시지 (body 포함) 처리
          FULL_MSG="${{ steps.detailed-info.outputs.full_message }}"
          if [ ${#FULL_MSG} -gt 1000 ]; then
            FULL_MSG="${FULL_MSG:0:1000}..."
          fi
          
          # Discord 메시지 JSON 생성
          cat << EOF > discord_payload.json
          {
            "content": "@here 🔔 **API 변경 알림**",
            "embeds": [
              {
                "title": "$TITLE",
                "description": "**$CLEAN_MESSAGE**",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "📁 Repository",
                    "value": "[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})",
                    "inline": true
                  },
                  {
                    "name": "🌿 Branch",
                    "value": "\`${{ steps.check-commit.outputs.branch_name }}\`",
                    "inline": true
                  },
                  {
                    "name": "👤 Author",
                    "value": "${{ steps.check-commit.outputs.commit_author }}",
                    "inline": true
                  },
                  {
                    "name": "📝 Commit SHA",
                    "value": "\`${{{ steps.check-commit.outputs.commit_sha }}:0:7}\`",
                    "inline": true
                  },
                  {
                    "name": "📅 Date",
                    "value": "${{ steps.detailed-info.outputs.commit_date }}",
                    "inline": true
                  },
                  {
                    "name": "📊 Changed Files",
                    "value": "**${{ steps.changed-files.outputs.file_count }}**개 파일",
                    "inline": true
                  }
          EOF
          
          # 파일 목록이 있으면 추가
          if [ -n "$FORMATTED_FILES" ]; then
            cat << EOF >> discord_payload.json
                  ,
                  {
                    "name": "📄 변경된 파일 목록",
                    "value": "$FORMATTED_FILES",
                    "inline": false
                  }
          EOF
          fi
          
          # 전체 메시지가 있으면 추가 (첫 줄과 다른 경우)
          if [ -n "$FULL_MSG" ] && [ "$FULL_MSG" != "${{ steps.check-commit.outputs.commit_msg }}" ]; then
            ESCAPED_FULL_MSG=$(echo "$FULL_MSG" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            cat << EOF >> discord_payload.json
                  ,
                  {
                    "name": "📋 상세 내용",
                    "value": "$(echo "$ESCAPED_FULL_MSG" | head -c 1000)",
                    "inline": false
                  }
          EOF
          fi
          
          # JSON 마무리
          cat << EOF >> discord_payload.json
                  ,
                  {
                    "name": "🔗 View Changes",
                    "value": "[🔍 변경사항 보기](${{ steps.check-commit.outputs.commit_url }})",
                    "inline": false
                  }
                ],
                "footer": {
                  "text": "GitHub Actions • ${{ github.workflow }} • API 변경 감지",
                  "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                },
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
              }
            ]
          }
          EOF
          
          # Discord 웹훅으로 메시지 전송
          response=$(curl -s -w "%{http_code}" -H "Content-Type: application/json" \
                          -d @discord_payload.json \
                          "$DISCORD_WEBHOOK_URL")
          
          http_code=$(echo "$response" | tail -n1)
          if [ "$http_code" -eq 204 ]; then
            echo "✅ Discord 알림이 성공적으로 전송되었습니다!"
          else
            echo "❌ Discord 알림 전송 실패. HTTP 코드: $http_code"
            exit 1
          fi

      - name: Summary
        if: steps.check-commit.outputs.is_api_change == 'true'
        run: |
          echo "## 🔔 API 변경 알림 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **감지된 커밋**: ${{ steps.check-commit.outputs.commit_msg }}" >> $GITHUB_STEP_SUMMARY
          echo "- **변경된 파일 수**: ${{ steps.changed-files.outputs.file_count }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: ${{ steps.check-commit.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋 작성자**: ${{ steps.check-commit.outputs.commit_author }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Discord 알림**: ✅ 전송 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 커밋 상세 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: \`${{ steps.check-commit.outputs.commit_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **링크**: [${{ steps.check-commit.outputs.commit_sha }}](${{ steps.check-commit.outputs.commit_url }})" >> $GITHUB_STEP_SUMMARY

      - name: No API changes detected
        if: steps.check-commit.outputs.is_api_change == 'false'
        run: |
          echo "ℹ️  '[API 변경]'으로 시작하는 커밋이 아닙니다. 알림을 보내지 않습니다."
          echo "현재 커밋 메시지: ${{ steps.check-commit.outputs.commit_msg }}"